package com.heheys.ec.controller.activity;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.LruCache;
import android.view.Gravity;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.baidu.location.BDLocation;
import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.BitmapDescriptor;
import com.baidu.mapapi.map.BitmapDescriptorFactory;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.map.Marker;
import com.baidu.mapapi.map.MarkerOptions;
import com.baidu.mapapi.map.MyLocationConfiguration;
import com.baidu.mapapi.map.MyLocationData;
import com.baidu.mapapi.map.OverlayOptions;
import com.baidu.mapapi.map.PolygonOptions;
import com.baidu.mapapi.map.PolylineOptions;
import com.baidu.mapapi.map.Stroke;
import com.baidu.mapapi.map.TextOptions;
import com.baidu.mapapi.model.LatLng;
import com.baidu.mapapi.model.LatLngBounds;
import com.baidu.mapapi.search.core.PoiInfo;
import com.baidu.mapapi.search.core.RouteLine;
import com.baidu.mapapi.search.core.SearchResult;
import com.baidu.mapapi.search.district.DistrictResult;
import com.baidu.mapapi.search.district.DistrictSearch;
import com.baidu.mapapi.search.district.DistrictSearchOption;
import com.baidu.mapapi.search.district.OnGetDistricSearchResultListener;
import com.baidu.mapapi.search.geocode.GeoCodeResult;
import com.baidu.mapapi.search.geocode.GeoCoder;
import com.baidu.mapapi.search.geocode.OnGetGeoCoderResultListener;
import com.baidu.mapapi.search.geocode.ReverseGeoCodeOption;
import com.baidu.mapapi.search.geocode.ReverseGeoCodeResult;
import com.baidu.mapapi.search.poi.OnGetPoiSearchResultListener;
import com.baidu.mapapi.search.poi.PoiDetailResult;
import com.baidu.mapapi.search.poi.PoiIndoorResult;
import com.baidu.mapapi.search.poi.PoiNearbySearchOption;
import com.baidu.mapapi.search.poi.PoiResult;
import com.baidu.mapapi.search.poi.PoiSearch;
import com.baidu.mapapi.search.poi.PoiSortType;
import com.baidu.mapapi.search.route.BikingRouteResult;
import com.baidu.mapapi.search.route.DrivingRouteLine;
import com.baidu.mapapi.search.route.DrivingRoutePlanOption;
import com.baidu.mapapi.search.route.DrivingRouteResult;
import com.baidu.mapapi.search.route.IndoorRouteResult;
import com.baidu.mapapi.search.route.MassTransitRouteResult;
import com.baidu.mapapi.search.route.OnGetRoutePlanResultListener;
import com.baidu.mapapi.search.route.PlanNode;
import com.baidu.mapapi.search.route.RoutePlanSearch;
import com.baidu.mapapi.search.route.TransitRouteResult;
import com.baidu.mapapi.search.route.WalkingRouteResult;
import com.heheys.ec.R;
import com.heheys.ec.application.MyApplication;
import com.heheys.ec.lib.utils.StringUtil;
import com.heheys.ec.model.adapter.RouteLineAdapter;
import com.heheys.ec.model.dataBean.GoodsMapList;
import com.heheys.ec.utils.ConstantsUtil;
import com.heheys.ec.utils.DiskLruCache;
import com.heheys.ec.utils.DrivingRouteOverlay;
import com.heheys.ec.utils.ToastUtil;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;


/**
 * @author wangkui 地图
 */
public class BaiduMapActivity extends Activity implements
		OnGetDistricSearchResultListener,View.OnClickListener {

	private MapView mMapView;
	private Button button_seach;
	private EditText mDistrict, mCity;
	private DistrictSearch mDistrictSearch;
	private BaiduMap mBaiduMap;
	private final int color = 0xAAFF0000;
	private BDLocation location;
	private GeoCoder mseach;
	private PoiSearch mPoiSearch;
	// 初始化全局 bitmap 信息，不用时及时 recycle
    private ArrayList<BitmapDescriptor> listBitmap;
	private DrivingRouteOverlay overlay;
	public boolean useDefaultIcon;
	private DrivingRouteResult nowResultd;
	private DrivingRouteLine route;
	private DrivingRouteOverlay routeOverlay;
	private Button bt_seach;
	private EditText et_point;
	private LatLng ptCenter;
	private Marker mMarkerD;
	private int screenHeight;
	private Bitmap[] downBm;
    private String[] picName;
    private Bitmap[] bm ;
    private List<GoodsMapList.MapList> listmap;
    private int size;
    private TextView num_people;
    private TextView baidu_close;
	/**
	 * 记录所有正在下载或等待下载的任务。
	 */
	private Set<BitmapWorkerTask> taskCollection;

	/**
	 * 图片缓存技术的核心类，用于缓存所有下载好的图片，在程序内存达到设定值时会将最少最近使用的图片移除掉。
	 */
	private LruCache<String, Bitmap> mMemoryCache;

	/**
	 * 图片硬盘缓存核心类。
	 */
	private DiskLruCache mDiskLruCache;
	private Handler handler = new Handler(){
		@Override
		public void handleMessage(Message msg) {

			super.handleMessage(msg);
			switch (msg.what){
				case ConstantsUtil.HTTP_SUCCESS:
					//成功
					downBm = (Bitmap[]) msg.obj;
					if(downBm != null && downBm.length == size){

						for (int i = 0; i < size; i++) {
							setPoint( listmap.get(i).getLat(),
									listmap.get(i).getLng(),
									listmap.get(i).getName(),BitmapDescriptorFactory
											.fromBitmap(downBm[i]));
						}
				    }
					break;
				case ConstantsUtil.HTTP_FAILE:

					break;
			}
		}
	};


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		this.requestWindowFeature(Window.FEATURE_NO_TITLE); // 设置Activity标题不显示
		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);// 设置全屏显示
		super.onCreate(savedInstanceState);
		setContentView(R.layout.baidumap);

		mMapView = (MapView) findViewById(R.id.bmapView);
		mDistrictSearch = DistrictSearch.newInstance();
		mDistrictSearch.setOnDistrictSearchListener(this);
		mBaiduMap = mMapView.getMap();
		baidu_close = (TextView) findViewById(R.id.baidu_close);
		num_people = (TextView) findViewById(R.id.num_people);
		mCity = (EditText) findViewById(R.id.city);
		mDistrict = (EditText) findViewById(R.id.district);
		button_seach = (Button) findViewById(R.id.districSearch);
		bt_seach = (Button) findViewById(R.id.bt_seach);
		et_point = (EditText) findViewById(R.id.et_point);
		button_seach.setOnClickListener(this);
		bt_seach.setOnClickListener(this);
		baidu_close.setOnClickListener(this);
//
		mseach = GeoCoder.newInstance();
//		ToastUtil.showToast(this, "定位中...");
//		// 开启定位图层
		mBaiduMap.setMyLocationEnabled(true);
		location = MyApplication.location;
		double Longitude = location.getLongitude();// 获取精度坐标
		double latitude = location.getLatitude();// 获取纬度坐标
//		System.out.println("Longitude(精度)=" + Longitude + " latitude(维度)="
//				+ latitude);
//		Log.d("tag", "Longitude(精度)=" + Longitude + " latitude(维度)=" + latitude);
		ptCenter = new LatLng(latitude, Longitude);
//		//检索附近的point
		SeachNearBy(Longitude, latitude);
//		// 反Geo搜索
		mseach.reverseGeoCode(new ReverseGeoCodeOption().location(ptCenter));
		mseach.setOnGetGeoCodeResultListener(new OnGetGeoCoderResultListener() {
			@Override
			public void onGetReverseGeoCodeResult(ReverseGeoCodeResult result) {
				if (result == null
						|| result.error != SearchResult.ERRORNO.NO_ERROR) {
					// Toast.makeText(this, "抱歉，未能找到结果", Toast.LENGTH_LONG)
					// .show();
					return;
				}
				ToastUtil.showToast(BaiduMapActivity.this, result.getAddress());
				mCity.setText(StringUtil.isEmpty(result.getAddressDetail().city) ? ""
						: result.getAddressDetail().city);
				mDistrict.setText(StringUtil.isEmpty(result.getAddressDetail().district) ? ""
						: result.getAddressDetail().district);
			}

			@Override
			public void onGetGeoCodeResult(GeoCodeResult arg0) {
				// TODO Auto-generated method stub
			}
		});
//		// 构造定位数据
		MyLocationData locData = new MyLocationData.Builder()
				.accuracy(location.getRadius())
				// 此处设置开发者获取到的方向信息，顺时针0-360
				.direction(100).latitude(location.getLatitude())
				.longitude(location.getLongitude()).build();
//		// 设置定位数据
		mBaiduMap.setMyLocationData(locData);
//		// 设置定位图层的配置（定位模式，是否允许方向信息，用户自定义定位图标）
		BitmapDescriptor mCurrentMarker = BitmapDescriptorFactory
				.fromResource(R.drawable.icon_geo);
		MyLocationConfiguration.LocationMode mLocationMode = MyLocationConfiguration.LocationMode.NORMAL;
		MyLocationConfiguration config = new MyLocationConfiguration(mLocationMode, true, mCurrentMarker);
		mBaiduMap.setMyLocationConfigeration(config);
//		// 当不需要定位图层时关闭定位图层
//		mBaiduMap.setMyLocationEnabled(true);
//
//		/*
//		 * 设置热点点击
//		 */
//		mBaiduMap.setOnMarkerClickListener(new BaiduMap.OnMarkerClickListener() {
//
//			@Override
//			public boolean onMarkerClick(Marker arg0) {
//				if(overlay!=null)
//					overlay.removeFromMap();
//				LatLng lat = arg0.getPosition();
//				RoutePlan(ptCenter, lat);
//				return true;
//			}
//		});
//		SeachePoint("酒店");


		/**
		 * 初始化缓存数据
		 * */
		InitCache();
		init();
	}

	private void InitCache() {
		taskCollection = new HashSet<>();
		// 获取应用程序最大可用内存
		int maxMemory = (int) Runtime.getRuntime().maxMemory();
		int cacheSize = maxMemory / 8;
		// 设置图片缓存大小为程序最大可用内存的1/8
		mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {
			@Override
			protected int sizeOf(String key, Bitmap bitmap) {
				return bitmap.getByteCount();
			}
		};
		try {
			// 获取图片缓存路径
			File cacheDir = getDiskCacheDir(BaiduMapActivity.this, "thumb");
			if (!cacheDir.exists()) {
				cacheDir.mkdirs();
			}
			// 创建DiskLruCache实例，初始化缓存数据
			mDiskLruCache = DiskLruCache
					.open(cacheDir, getAppVersion(BaiduMapActivity.this), 1, 10 * 1024 * 1024);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}


	/**
	 * 将一张图片存储到LruCache中。
	 *
	 * @param key
	 *            LruCache的键，这里传入图片的URL地址。
	 * @param bitmap
	 *            LruCache的键，这里传入从网络上下载的Bitmap对象。
	 */
	public void addBitmapToMemoryCache(String key, Bitmap bitmap) {
		if (getBitmapFromMemoryCache(key) == null) {
			mMemoryCache.put(key, bitmap);
		}
	}

	/**
	 * 从LruCache中获取一张图片，如果不存在就返回null。
	 *
	 * @param key
	 *            LruCache的键，这里传入图片的URL地址。
	 * @return 对应传入键的Bitmap对象，或者null。
	 */
	public Bitmap getBitmapFromMemoryCache(String key) {
		return mMemoryCache.get(key);
	}

	/**
	 * 加载Bitmap对象。此方法会在LruCache中检查所有屏幕中可见的ImageView的Bitmap对象，
	 * 如果发现任何一个ImageView的Bitmap对象不在缓存中，就会开启异步线程去下载图片。
	 */
	public void loadBitmaps(String imageUrl,int index) {
		try {
			/**特殊处理*/
			Bitmap bitmap = getBitmapFromMemoryCache(imageUrl+index);
			if (bitmap == null) {
				BitmapWorkerTask task = new BitmapWorkerTask(index);
				taskCollection.add(task);
				task.execute(imageUrl);
			} else {
//				if (imageView != null && bitmap != null) {
//					imageView.setImageBitmap(bitmap);
//				}
				int nowIndex = smatchImageBack(imageUrl+index);
				downBm[nowIndex] = bitmap;
				setPoint(listmap.get(nowIndex).getLat(),
						listmap.get(nowIndex).getLng(),
						listmap.get(nowIndex).getName(),BitmapDescriptorFactory
								.fromBitmap(downBm[nowIndex]));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 匹配图片到对应的经纬度数据上
	 * */
	int  smatchImageBack(String imageUrl){
		int index = -1;
        for(int i = 0;i<size;i++){
			if((listmap.get(i).getIcon()+i).equals(imageUrl)){
				if(downBm != null && downBm.length == size) {
					index = i;
					return index;
				}
			}
		}
		return -1;
	}

	/**
	 * 取消所有正在下载或等待下载的任务。
	 */
	public void cancelAllTasks() {
		if (taskCollection != null) {
			for (BitmapWorkerTask task : taskCollection) {
				task.cancel(false);
			}
		}
	}

	/**
	 * 根据传入的uniqueName获取硬盘缓存的路径地址。
	 */
	public File getDiskCacheDir(Context context, String uniqueName) {
		String cachePath;
		if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())
				|| !Environment.isExternalStorageRemovable()) {
			cachePath = context.getExternalCacheDir().getPath();
		} else {
			cachePath = context.getCacheDir().getPath();
		}
		return new File(cachePath + File.separator + uniqueName);
	}

	/**
	 * 获取当前应用程序的版本号。
	 */
	public int getAppVersion(Context context) {
		try {
			PackageInfo info = context.getPackageManager().getPackageInfo(context.getPackageName(),
					0);
			return info.versionCode;
		} catch (PackageManager.NameNotFoundException e) {
			e.printStackTrace();
		}
		return 1;
	}

	/**
	 * 设置item子项的高度。
	 */
//	public void setItemHeight(int height) {
//		if (height == mItemHeight) {
//			return;
//		}
//		mItemHeight = height;
//		notifyDataSetChanged();
//	}

	/**
	 * 使用MD5算法对传入的key进行加密并返回。
	 */
	public String hashKeyForDisk(String key) {
		String cacheKey;
		try {
			final MessageDigest mDigest = MessageDigest.getInstance("MD5");
			mDigest.update(key.getBytes());
			cacheKey = bytesToHexString(mDigest.digest());
		} catch (NoSuchAlgorithmException e) {
			cacheKey = String.valueOf(key.hashCode());
		}
		return cacheKey;
	}

	/**
	 * 将缓存记录同步到journal文件中。
	 */
	public void fluchCache() {
		if (mDiskLruCache != null) {
			try {
				mDiskLruCache.flush();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	private String bytesToHexString(byte[] bytes) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < bytes.length; i++) {
			String hex = Integer.toHexString(0xFF & bytes[i]);
			if (hex.length() == 1) {
				sb.append('0');
			}
			sb.append(hex);
		}
		return sb.toString();
	}
	/**
	 * 异步下载图片的任务。
	 *
	 * @author guolin
	 */
	class BitmapWorkerTask extends AsyncTask<String, Void, Bitmap> {
		int index;
		BitmapWorkerTask(int index){
			this.index = index;
		}
		/**
		 * 图片的URL地址
		 */
		private String imageUrl;

		@Override
		protected Bitmap doInBackground(String... params) {
			imageUrl = params[0];
			FileDescriptor fileDescriptor = null;
			FileInputStream fileInputStream = null;
			DiskLruCache.Snapshot snapShot = null;
			try {
				// 生成图片URL对应的key
				final String key = hashKeyForDisk(imageUrl);
				// 查找key对应的缓存
				snapShot = mDiskLruCache.get(key);
				if (snapShot == null) {
					// 如果没有找到对应的缓存，则准备从网络上请求数据，并写入缓存
					DiskLruCache.Editor editor = mDiskLruCache.edit(key);
					if (editor != null) {
						OutputStream outputStream = editor.newOutputStream(0);
						if (downloadUrlToStream(imageUrl, outputStream)) {
							editor.commit();
						} else {
							editor.abort();
						}
					}
					// 缓存被写入后，再次查找key对应的缓存
					snapShot = mDiskLruCache.get(key);
				}
				if (snapShot != null) {
					fileInputStream = (FileInputStream) snapShot.getInputStream(0);
					fileDescriptor = fileInputStream.getFD();
				}
				// 将缓存数据解析成Bitmap对象
				Bitmap bitmap = null;
				if (fileDescriptor != null) {
					bitmap = BitmapFactory.decodeFileDescriptor(fileDescriptor);
				}
				if (bitmap != null) {
					// 将Bitmap对象添加到内存缓存当中 特殊处理相同图片
					addBitmapToMemoryCache(params[0]+index, bitmap);
				}
				return bitmap;
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				if (fileDescriptor == null && fileInputStream != null) {
					try {
						fileInputStream.close();
					} catch (IOException e) {
					}
				}
			}
			return null;
		}

		@Override
		protected void onPostExecute(Bitmap bitmap) {
			super.onPostExecute(bitmap);
			// 根据Tag找到相应的ImageView控件，将下载好的图片显示出来。
//			ImageView imageView = (ImageView) mPhotoWall.findViewWithTag(imageUrl);
//			if (imageView != null && bitmap != null) {
//				imageView.setImageBitmap(bitmap);
//			}
			int nowIndex = smatchImageBack(imageUrl+index);
			downBm[nowIndex] = bitmap;
			if(nowIndex >= 0 && nowIndex < size) {
				setPoint(listmap.get(nowIndex).getLat(),
						listmap.get(nowIndex).getLng(),
						listmap.get(nowIndex).getName(), BitmapDescriptorFactory
								.fromBitmap(downBm[nowIndex]));
			}
			taskCollection.remove(this);
		}

		/**
		 * 建立HTTP请求，并获取Bitmap对象。
		 *
		 * @paramimageUrl
		 *            图片的URL地址
		 * @return 解析后的Bitmap对象
		 */
		private boolean downloadUrlToStream(String urlString, OutputStream outputStream) {
			HttpURLConnection urlConnection = null;
			BufferedOutputStream out = null;
			BufferedInputStream in = null;
			try {
				final URL url = new URL(urlString);
				urlConnection = (HttpURLConnection) url.openConnection();
				in = new BufferedInputStream(urlConnection.getInputStream(), 8 * 1024);
				out = new BufferedOutputStream(outputStream, 8 * 1024);
				int b;
				while ((b = in.read()) != -1) {
					out.write(b);
				}
				return true;
			} catch (final IOException e) {
				e.printStackTrace();
			} finally {
				if (urlConnection != null) {
					urlConnection.disconnect();
				}
				try {
					if (out != null) {
						out.close();
					}
					if (in != null) {
						in.close();
					}
				} catch (final IOException e) {
					e.printStackTrace();
				}
			}
			return false;
		}

	}
	private void init() {
		// 获取屏幕高度
		screenHeight = getWindow().getWindowManager().getDefaultDisplay()
				.getHeight();

		WindowManager.LayoutParams lp = getWindow().getAttributes();// //lp包含了布局的很多信息，通过lp来设置对话框的布局
		lp.width = WindowManager.LayoutParams.FILL_PARENT;
		lp.gravity = Gravity.BOTTOM;
			lp.height = screenHeight * 1 / 2;// lp高度设置为屏幕的1/2
		getWindow().setAttributes(lp);// 将设置好属性的lp应用到对话框
		listBitmap = new ArrayList<>();
		Intent intent = getIntent();
		if(intent != null){
			listmap = (List<GoodsMapList.MapList>) intent.getSerializableExtra("listmap");
			if(listmap != null && listmap.size()>0){
				size = listmap.size();
				num_people.setText("共有"+size+"人购买了该商品");
				//最多现实300个点
				if(size > 300){
					size = 300;
				}
				downBm = new Bitmap[size];
				picName = new  String[size];
				bm = new Bitmap[size];
				for(int i = 0; i < size; i++){
					picName[i] = listmap.get(i).getIcon();
					loadBitmaps(picName[i],i);
				}
//				ManyPic(picName);
			}
		}
	}
	public static Bitmap zoomImage(Bitmap bgimage, double newWidth,
								   double newHeight) {
		// 获取这个图片的宽和高
		float width = bgimage.getWidth();
		float height = bgimage.getHeight();
		// 创建操作图片用的matrix对象
		Matrix matrix = new Matrix();
		// 计算宽高缩放率
		float scaleWidth = ((float) newWidth) / width;
		float scaleHeight = ((float) newHeight) / height;
		// 缩放图片动作
		matrix.postScale(scaleWidth, scaleHeight);
		Bitmap bitmap = Bitmap.createBitmap(bgimage, 0, 0, (int) width,
				(int) height, matrix, true);
		return bitmap;
	}
	public static Bitmap[] getBitmap(String[] picName) throws IOException{
		Bitmap[] b=new Bitmap[picName.length];
		for (int i = 0; i < picName.length; i++) {
			URL url = new URL(picName[i]);
			HttpURLConnection conn = (HttpURLConnection)url.openConnection();
			conn.setConnectTimeout(5000);
			conn.setRequestMethod("GET");
			if(conn.getResponseCode() == 200){
				InputStream inputStream = conn.getInputStream();
				Bitmap bitmap = BitmapFactory.decodeStream(inputStream);
				b[i]=zoomImage(bitmap,50,50);
			}
		}
		return b;
		}

	private void ManyPic(final String[] picName) {
		new Thread(new Runnable() {

			@Override
			public void run() {
				Message ms = handler.obtainMessage();
				try {
					if (getBitmap(picName) != null) {
						bm = getBitmap(picName);
						ms.what = ConstantsUtil.HTTP_SUCCESS;
						ms.obj = bm;
						ms.sendToTarget();
					} else {
						ms.what = ConstantsUtil.HTTP_FAILE;
						ms.obj = "";
						ms.sendToTarget();
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}).start();
	}
	// 响应DLg中的List item 点击
	interface OnItemInDlgClickListener {
		public void onItemClick(int position);
	}

	// 供路线选择的Dialog
	class MyTransitDlg extends Dialog {
		private List<? extends RouteLine> mtransitRouteLines;
		private ListView transitRouteList;
		private RouteLineAdapter mTransitAdapter;

		OnItemInDlgClickListener onItemInDlgClickListener;

		public MyTransitDlg(Context context, int theme) {
			super(context, theme);
		}

		public MyTransitDlg(Context context,
				List<? extends RouteLine> transitRouteLines,
				RouteLineAdapter.Type type) {
			this(context, 0);
			mtransitRouteLines = transitRouteLines;
			mTransitAdapter = new RouteLineAdapter(context, mtransitRouteLines,
					type);
			requestWindowFeature(Window.FEATURE_NO_TITLE);
		}

		public void setOnItemInDlgClickLinster(
				OnItemInDlgClickListener itemListener) {
			onItemInDlgClickListener = itemListener;
		}

	}

	/*
	 * 开车路径规划
	 */
	private void RoutePlan(LatLng latst, LatLng lated) {
		// 第一步，创建驾车线路规划检索实例；
		RoutePlanSearch mSearch = RoutePlanSearch.newInstance();
		// 第二步，创建驾车线路规划检索监听者；
		OnGetRoutePlanResultListener listener = new OnGetRoutePlanResultListener() {

			public void onGetWalkingRouteResult(WalkingRouteResult result) {
				// 获取步行线路规划结果
			}

			public void onGetTransitRouteResult(TransitRouteResult result) {
				// 获取公交换乘路径规划结果
			}

			public void onGetDrivingRouteResult(DrivingRouteResult result) {
				// 获取驾车线路规划结果

				if (result == null
						|| result.error != SearchResult.ERRORNO.NO_ERROR) {
					Toast.makeText(BaiduMapActivity.this, "抱歉，未找到结果",
							Toast.LENGTH_SHORT).show();
				}
				if (result.error == SearchResult.ERRORNO.AMBIGUOUS_ROURE_ADDR) {
					// 起终点或途经点地址有岐义，通过以下接口获取建议查询信息
					// result.getSuggestAddrInfo()
					return;
				}
				if (result.error == SearchResult.ERRORNO.NO_ERROR) {
					int nodeIndex = -1;
					overlay = new MyDrivingRouteOverlay(
							mBaiduMap);
					if (result.getRouteLines().size() > 1) {
						nowResultd = result;

						MyTransitDlg myTransitDlg = new MyTransitDlg(
								BaiduMapActivity.this, result.getRouteLines(),
								RouteLineAdapter.Type.DRIVING_ROUTE);
						myTransitDlg
								.setOnItemInDlgClickLinster(new OnItemInDlgClickListener() {

									public void onItemClick(int position) {
										route = nowResultd.getRouteLines().get(
												position);
										
										mBaiduMap
												.setOnMarkerClickListener(overlay);
										routeOverlay = overlay;
										overlay.setData(nowResultd
												.getRouteLines().get(position));
										overlay.addToMap();
										overlay.zoomToSpan();
									}

								});
						myTransitDlg.show();

					} else if (result.getRouteLines().size() == 1) {
						route = result.getRouteLines().get(0);
						routeOverlay = overlay;
						mBaiduMap.setOnMarkerClickListener(overlay);
						overlay.setData(result.getRouteLines().get(0));
						overlay.addToMap();
						overlay.zoomToSpan();
					}
				}
			}

			@Override
			public void onGetBikingRouteResult(BikingRouteResult arg0) {
				// TODO Auto-generated method stub

			}

			@Override
			public void onGetIndoorRouteResult(IndoorRouteResult arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onGetMassTransitRouteResult(MassTransitRouteResult arg0) {
				// TODO Auto-generated method stub
				
			}
		};
		// 第三步，设置驾车线路规划检索监听者；
		mSearch.setOnGetRoutePlanResultListener(listener);
		// 第四步，准备检索起、终点信息；
		// PlanNode stNode = PlanNode.withCityNameAndPlaceName("北京", "龙泽");
		PlanNode stNode = PlanNode.withLocation(latst);
		PlanNode enNode = PlanNode.withLocation(lated);
		// 第五步，发起驾车线路规划检索；
		mSearch.drivingSearch((new DrivingRoutePlanOption()).from(stNode).to(
				enNode));
	}

	// 定制RouteOverly
	private class MyDrivingRouteOverlay extends DrivingRouteOverlay {

		public MyDrivingRouteOverlay(BaiduMap baiduMap) {
			super(baiduMap);
		}

		@Override
		public BitmapDescriptor getStartMarker() {
			if (useDefaultIcon) {

				return BitmapDescriptorFactory.fromResource(R.drawable.icon_st);
			}
			return null;
		}

		@Override
		public BitmapDescriptor getTerminalMarker() {
			if (useDefaultIcon) {
				return BitmapDescriptorFactory.fromResource(R.drawable.icon_en);
			}
			return null;
		}
	}

	/*
	 * 附近热点检索
	 */
	private void SeachNearBy(double Longitude, double latitude) {
		mPoiSearch = PoiSearch.newInstance();
		// 第二步，创建POI检索监听者；
		OnGetPoiSearchResultListener poiListener = new OnGetPoiSearchResultListener() {
			public void onGetPoiResult(PoiResult result) {
				if (result == null
						|| result.error == SearchResult.ERRORNO.RESULT_NOT_FOUND) {
					return;
				}
				if (result.error == SearchResult.ERRORNO.NO_ERROR) {
					// 获取POI检索结果
					List<PoiInfo> lsPoint = result.getAllPoi();
					if (lsPoint != null && lsPoint.size() > 0) {
						int size = lsPoint.size();
						num_people.setText("共有"+size+"人购买了该商品");
						for (int i = 0; i < size; i++) {
							setPoint( lsPoint.get(i).location.latitude,
									lsPoint.get(i).location.longitude,
									lsPoint.get(i).name,null);
						}
					}
					return;
				}
			}

			@Override
			public void onGetPoiIndoorResult(PoiIndoorResult arg0) {
				// TODO Auto-generated method stub
				// 获取Place详情页检索结果
//				System.out.println(arg0.toString());
			}

			@Override
			public void onGetPoiDetailResult(PoiDetailResult arg0) {
				// TODO Auto-generated method stub
//				System.out.println(arg0.toString());
			}
		};
		// 第三步，设置POI检索监听者；
		mPoiSearch.setOnGetPoiSearchResultListener(poiListener);
	}

	/*
	 * 搜索兴趣点
	 * */
	private void SeachePoint(String name){
		MyPoiNearbySearchOption myPoiNearbySearchOption = new MyPoiNearbySearchOption();
		myPoiNearbySearchOption.keyword(name)
				.location(ptCenter).pageNum(10)
				.radius(5000);
		mPoiSearch.searchNearby(myPoiNearbySearchOption);
	}
	private BitmapDescriptor Drable(int i) {
		return listBitmap.get(i);
	}

	/*
	 * 设置百度地图检索视图在地图标注
	 */
	private void setPoint(double arg0, double arg1, String addName,BitmapDescriptor bitmapDescriptor) {
		// 定义Maker坐标点
		LatLng point = new LatLng(arg0, arg1);
		// 构建Marker图标 bdA
//		BitmapDescriptor bitmap = Drable(i);
		OverlayOptions textOption = new TextOptions()
				.fontSize(24).fontColor(0xFFFF3838).text(addName)
				.position(point);
		// 在地图上添加Marker，并显示
		// mBaiduMap.addOverlay(option);
		mBaiduMap.addOverlay(textOption);
		
		MarkerOptions ooD = new MarkerOptions().position(point)
				.icon(bitmapDescriptor).zIndex(0);
		// 生长动画
		ooD.animateType(MarkerOptions.MarkerAnimateType.grow);
		mMarkerD = (Marker) (mBaiduMap.addOverlay(ooD));
		mMarkerD.setPeriod(5);
	}

	class MyPoiNearbySearchOption extends PoiNearbySearchOption {

		@Override
		public PoiNearbySearchOption keyword(String arg0) {
			// TODO Auto-generated method stub
//			System.out.println(arg0);
			return super.keyword(arg0);
		}

		@Override
		public PoiNearbySearchOption location(LatLng arg0) {
			// TODO Auto-generated method stub
//			System.out.println(arg0);
			return super.location(arg0);
		}

		@Override
		public PoiNearbySearchOption pageCapacity(int arg0) {
			// TODO Auto-generated method stub
//			System.out.println(arg0);
			return super.pageCapacity(arg0);
		}

		@Override
		public PoiNearbySearchOption pageNum(int arg0) {
			// TODO Auto-generated method stub
//			System.out.println(arg0);
			return super.pageNum(arg0);
		}

		@Override
		public PoiNearbySearchOption radius(int arg0) {
			// TODO Auto-generated method stub
//			System.out.println(arg0);
			return super.radius(arg0);
		}

		@Override
		public PoiNearbySearchOption sortType(PoiSortType arg0) {
			// TODO Auto-generated method stub
			return super.sortType(arg0);
		}
	}


	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
//		super.onClick(v);
		switch (v.getId()) {
		case R.id.baidu_close:
			    finish();
				break;
		case R.id.districSearch:
			String city = "";
			String district = "";
			if (mCity.getText() != null && !"".equals(mCity.getText())) {
				city = mCity.getText().toString();
			}
			if (mDistrict.getText() != null && !"".equals(mDistrict.getText())) {
				district = mDistrict.getText().toString();
			}
			mDistrictSearch.searchDistrict(new DistrictSearchOption().cityName(
					city).districtName(district));
			break;
		case R.id.bt_seach:
			//检索附近兴趣点
			String seachePoint = et_point.getText().toString().trim();
			if(!StringUtil.isEmpty(seachePoint)){
				if(mMarkerD != null){
				mMarkerD.remove();
				}
				SeachePoint(seachePoint);
			}else{
				ToastUtil.showToast(this, "请输入搜索名称");
			}
			break;
		default:
			break;
		}
	}


	@Override
	protected void onDestroy() {
		super.onDestroy();
		// 在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理
//		mDistrictSearch.destroy();
		mMapView.onDestroy();
		MapView.setMapCustomEnable(false);
	}

	@Override
	protected void onResume() {
		super.onResume();
		// 在activity执行onResume时执行mMapView. onResume ()，实现地图生命周期管理
		mMapView.onResume();
	}

	@Override
	protected void onPause() {
		super.onPause();
		// 在activity执行onPause时执行mMapView. onPause ()，实现地图生命周期管理
		mMapView.onPause();
	}

	@Override
	public void onGetDistrictResult(DistrictResult districtResult) {
		mBaiduMap.clear();
		if (districtResult == null) {
			return;
		}
		if (districtResult.error == SearchResult.ERRORNO.NO_ERROR) {
			List<List<LatLng>> polyLines = districtResult.getPolylines();
			if (polyLines == null) {
				return;
			}
			LatLngBounds.Builder builder = new LatLngBounds.Builder();
			for (List<LatLng> polyline : polyLines) {
				OverlayOptions ooPolyline11 = new PolylineOptions().width(10)
						.points(polyline).dottedLine(true).color(color);
				mBaiduMap.addOverlay(ooPolyline11);
				OverlayOptions ooPolygon = new PolygonOptions()
						.points(polyline).stroke(new Stroke(5, 0xAA00FF88))
						.fillColor(0xAAFFFF00);
				mBaiduMap.addOverlay(ooPolygon);
				for (LatLng latLng : polyline) {
					builder.include(latLng);
				}
			}
			mBaiduMap.setMapStatus(MapStatusUpdateFactory
					.newLatLngBounds(builder.build()));

		}
	}
}
