package com.heheys.ec.controller.activity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;

import org.apache.http.Header;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.google.gson.Gson;
import com.heheys.ec.R;
import com.heheys.ec.base.BaseActivity;
import com.heheys.ec.lib.utils.StringUtil;
import com.heheys.ec.lib.utils.WeakHandler;
import com.heheys.ec.model.dataBean.BaseBean;
import com.heheys.ec.model.dataBean.BaseCardBean;
import com.heheys.ec.model.dataBean.BaseCardBean.ResultCardBean;
import com.heheys.ec.model.dataBean.ErrorBean;
import com.heheys.ec.model.dataBean.LoginNamePwd;
import com.heheys.ec.netWorkHelper.ApiHttpCilent;
import com.heheys.ec.utils.ConstantsUtil;
import com.heheys.ec.utils.SharedPreferencesUtil;
import com.heheys.ec.utils.ToastUtil;
import com.heheys.ec.utils.ValidatorUtil;
import com.heheys.ec.view.DeleteEditText;
import com.loopj.android.http.BaseJsonHttpResponseHandler;
import com.umeng.analytics.MobclickAgent;

/**
 * @author wangkui E-mail:wang6851317@sina.com
 * @version 1.0
 * @param 创建时间
 *            ：2016-3-25 下午4:02:14 类说明设置收款账号界面
 */
public class WithDrawActivity extends BaseActivity implements OnClickListener {

	private DeleteEditText yinhang_name;
	private DeleteEditText card_num;
	private DeleteEditText name, code_et;
	private Button outh_code, bt_getmoney;
	private TextView tv_tel,tv;
	private String yinhang_name_text;
	private String card_num_text;
	private String name_text;
	private String code_et_text;
	// 消息桥梁balanceHandler
	private BalanceHandler setHandler = new BalanceHandler(this);
	private String tellength;
	private int mCountDown;
	private Timer countDownTimer;
	private BaseCardBean basecardbean;
	private LinearLayout linear_yzm;
	private LinearLayout linear_tv;
	private LinearLayout linear_tvnotice;
	@Override
	protected void onCreate() {
		// TODO Auto-generated method stub
	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setBaseContentView(R.layout.with_draw);
	}

	@Override
	protected boolean hasTitle() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected void loadChildView() {
		rlTitlePrent.setBackgroundColor(getResources().getColor(R.color.white));
		linear_yzm = (LinearLayout) findViewById(R.id.linear_yzm);
		linear_tvnotice = (LinearLayout) findViewById(R.id.linear_tvnotice);
		linear_tv = (LinearLayout) findViewById(R.id.linear_tv);
		yinhang_name = (DeleteEditText) findViewById(R.id.yinhang_name);
		card_num = (DeleteEditText) findViewById(R.id.card_num);
		name = (DeleteEditText) findViewById(R.id.name);
		code_et = (DeleteEditText) findViewById(R.id.code_et);
		outh_code = (Button) findViewById(R.id.outh_code);
		bt_getmoney = (Button) findViewById(R.id.bt_getmoney);
		tv_tel = (TextView) findViewById(R.id.tv_tel);
		tv = (TextView) findViewById(R.id.tv);
		outh_code.setOnClickListener(this);
		bt_getmoney.setOnClickListener(this);
		initData();
	}

	private void initData() {
		// TODO Auto-generated method stub
		ResultCardBean account = (ResultCardBean) getIntent().getSerializableExtra("account");
		int  role =  getIntent().getIntExtra("role", -1);
		
		if(account!=null){
			yinhang_name.setText(account.getAccountbank());
			card_num.setText(account.getAccountnum());
			name.setText(account.getAccountname());
			if(role==3 || role == 5){
				//代理商后台角色
				ResetTitle("收款账号");
				bt_getmoney.setVisibility(View.INVISIBLE);
				linear_yzm.setVisibility(View.INVISIBLE);
				linear_tvnotice.setVisibility(View.INVISIBLE);
				linear_tv.setVisibility(View.INVISIBLE);
				yinhang_name.isVisibleDrawble(false);
				card_num.isVisibleDrawble(false);
				name.isVisibleDrawble(false);
				yinhang_name.setEnabled(false);
				card_num.setEnabled(false);
				name.setEnabled(false);
			}else{
				yinhang_name.setHint("请输入开户行");
				card_num.setHint("请输入银行卡号");
				name.setHint("请输入账户名");
				ResetTitle("设置收款账号");
				yinhang_name.setEnabled(true);
				card_num.setEnabled(true);
				name.setEnabled(true);
				bt_getmoney.setVisibility(View.VISIBLE);
				linear_yzm.setVisibility(View.VISIBLE);
				linear_tvnotice.setVisibility(View.VISIBLE);
				linear_tv.setVisibility(View.VISIBLE);
				yinhang_name.isVisibleDrawble(false);
				card_num.isVisibleDrawble(false);
				name.isVisibleDrawble(false);
			}
		}
	}

	@Override
	protected void getNetData() {
		// TODO Auto-generated method stub
		ApiHttpCilent.getInstance(baseContext).GetUserCard(baseContext,
				new CardCallBack());
	}
	//账户
		public class CardCallBack extends BaseJsonHttpResponseHandler<BaseCardBean> {

			@Override
			public void onFailure(int arg0, Header[] arg1, Throwable arg2,
					String arg3, BaseCardBean arg4) {
				Dimess();
				Message message = Message.obtain();
				message.what = ConstantsUtil.HTTP_FAILE;// 错误
				setHandler.sendMessage(message);
			}

			@Override
			public void onSuccess(int arg0, Header[] arg1, String arg2,
					BaseCardBean arg3) {
			}

			@Override
			protected BaseCardBean parseResponse(String response, boolean arg1)
					throws Throwable {
				 Dimess();
				Gson gson = new Gson();
				basecardbean = gson.fromJson(response, BaseCardBean.class);
				if (basecardbean != null) {
					Message msg = new Message();
					if (("1").equals(basecardbean.getStatus())) {
						msg.what = ConstantsUtil.HTTP_SUCCESS_LOGIN_LAST;
						msg.obj = basecardbean.getResult();
					} else if (("0").equals(basecardbean.getStatus())) {
						msg.what = ConstantsUtil.HTTP_FAILE;
						msg.obj = basecardbean.getError();
					}
					setHandler.sendMessage(msg);
				}
				return basecardbean;
			}
		}
	/*
	 * 填写的信息验证
	 * */
	private boolean isTextEmpty(){
		yinhang_name_text = yinhang_name.getText().toString().trim();
		card_num_text = card_num.getText().toString().trim();
		name_text = name.getText().toString().trim();
		code_et_text = code_et.getText().toString().trim();
		if(StringUtil.isEmpty(yinhang_name_text))			
		{
			ToastText("开户行");
			return false;
		}
		if(StringUtil.isEmpty(card_num_text))			
		{
			ToastText("银行卡号");
			return false;
		}
		if(StringUtil.isEmpty(name_text))			
		{
			ToastText("账户名");
			return false;
		}
		if(StringUtil.isEmpty(code_et_text))			
		{
			ToastText("验证码");
			return false;
		}
		return true;
	}

	private void ToastText(String notice){
		ToastUtil.showToast(baseActivity, "您的"+notice+"没有填写!");
	}
	@Override
	protected void reloadCallback() {
		// TODO Auto-generated method stub

	}

	@Override
	protected void setChildViewListener() {
		// TODO Auto-generated method stub
	}

	@Override
	protected String setTitleName() {
		// TODO Auto-generated method stub
		return "设置收款账号";
	}

	@Override
	protected String setRightText() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected int setLeftImageResource() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	protected int setMiddleImageResource() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	protected int setRightImageResource() {
		// TODO Auto-generated method stub
		return 0;
	}
	//验证码倒计时
			private void startCountDown() {
				mCountDown = ConstantsUtil.BACK_SECOND;
				countDownTimer = new Timer();
				TimerTask timerTask = new TimerTask() {

					@Override
					public void run() {
						mCountDown--;
						if (mCountDown < 0) {
							countDownHandler
									.sendEmptyMessage(ConstantsUtil.COUNT_DOWN_END);
							countDownTimer.cancel();
							countDownTimer = null;
						} else {
							countDownHandler.sendEmptyMessage(ConstantsUtil.COUNT_DOWNING);
						}
					}
				};
				countDownTimer.schedule(timerTask, 0, ConstantsUtil.COUNT_DOWN_TIME);
			}

			/**
			 * 倒计时消息处理
			 */
			private Handler countDownHandler = new Handler() {
				public void handleMessage(Message msg) {
					switch (msg.what) {
					case ConstantsUtil.COUNT_DOWNING:
						outh_code.setText(mCountDown + "秒");
						outh_code.setClickable(false);
//						outh_code.setBackgroundResource(R.drawable.shape_button_gray);
						outh_code.setBackgroundResource(R.drawable.shape_button_gray);
						bt_getmoney.setBackgroundResource(R.drawable.bt_bg_yellow);
						break;
					case ConstantsUtil.COUNT_DOWN_END:
						outh_code.setText("发验证码");
						outh_code.setClickable(true);
						outh_code.setBackgroundResource(R.drawable.bt_bg_yellow);
						break;
					default:
						break;
					}
				}
			};
		
			
			/*
			 * 获取验证码
			 * */
	private void AuthTel() {
//		if(ValidatorUtil.isMobile(tellength)){
			startCountDown();
			ApiHttpCilent.getInstance(baseActivity).ObtinCode(baseActivity, tellength, new MyCallBack(),ConstantsUtil.CODE_FLAG_6);//获取验证码
//		}
	}
	
//	private void Dimess(){
//		runOnUiThread( new Runnable() {
//			public void run() {
//				ApiHttpCilent.loading.dismiss();
//			}
//		});
//	}
	//获取验证码
	class MyCallBack extends  BaseJsonHttpResponseHandler<BaseBean>{
		@Override
		public void onFailure(int arg0, Header[] arg1, Throwable arg2,
				String arg3, BaseBean arg4) {
			Dimess();
			Message message = Message.obtain();
			message.what = ConstantsUtil.HTTP_FAILE;// 错误
			setHandler.sendMessage(message);
		}

		@Override
		public void onSuccess(int arg0, Header[] arg1, String arg2,
				BaseBean arg3) {
			Dimess();
		}

		@Override
		protected BaseBean parseResponse(String response, boolean arg1)
				throws Throwable {
			// TODO Auto-generated method stub
			Dimess();
			Gson gson = new Gson();
			BaseBean loginBean = gson.fromJson(response,BaseBean.class);
			Message message = Message.obtain();
			 if("1".equals(loginBean.getStatus())){//验证码
				message.what = ConstantsUtil.HTTP_SUCCESS_LOGIN;
			}else if("0".equals(loginBean.getStatus())){
				message.what = ConstantsUtil.HTTP_FAILE;//验证码错误
				message.obj = loginBean.getError();
			}
			 setHandler.sendMessage(message);
			return loginBean;
		}
	}
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		HashMap<String,String> map = new HashMap<String,String>();
		switch (v.getId()) {
		case R.id.outh_code:
			map.put("buzType", "设置收款账号");
			MobclickAgent.onEvent(baseActivity, "C_BAC_MGR_1",map);
			ArrayList<LoginNamePwd> listlogin = (ArrayList<LoginNamePwd>) SharedPreferencesUtil.getObject(baseContext, "loginUserPwd");
			if(listlogin!=null && listlogin.size()>0){
				tellength = listlogin.get(listlogin.size()-1).getUserName().toString(); //手机号
				if(!StringUtil.isEmpty(tellength)){
					tv_tel.setText(tellength);
					tv.setVisibility(View.VISIBLE);
					AuthTel();
					bt_getmoney.setBackgroundResource(R.drawable.bt_bg_yellow);
				}
			}
			break;
		case R.id.bt_getmoney:
			MobclickAgent.onEvent(baseActivity, "C_BAC_MGR_2");
			if(isTextEmpty()){
			ApiHttpCilent.getInstance(baseContext).setDefaultCard(baseContext, yinhang_name_text, 
					card_num_text, name_text,code_et_text, new SetCallBack());
			}
			break;
		case R.id.base_activity_title_backicon:
			// 返回键处理
			onBackPressed();
			break;
		case R.id.linear_back:
			onBackPressed();
			break;
		default:
			break;
		}
	}
	// 异常等待框
		private void Dimess() {
			WithDrawActivity.this.runOnUiThread(new Runnable() {
				@Override
				public void run() {
					if(ApiHttpCilent.loading!=null && ApiHttpCilent.loading.isShowing())
						ApiHttpCilent.loading.dismiss();
				}
			});
		}

		public class SetCallBack extends
				BaseJsonHttpResponseHandler<BaseBean> {

			@Override
			public void onFailure(int arg0, Header[] arg1, Throwable arg2,
					String arg3, BaseBean arg4) {
				Dimess();
				Message message = Message.obtain();
				message.what = ConstantsUtil.HTTP_FAILE;// 错误
				setHandler.sendMessage(message);
			}

			@Override
			public void onSuccess(int arg0, Header[] arg1, String arg2,
					BaseBean arg3) {
			}

			@Override
			protected BaseBean parseResponse(String response, boolean arg1)
					throws Throwable {
				 Dimess();
				Gson gson = new Gson();
				BaseBean basebean = gson.fromJson(response, BaseBean.class);
				if (basebean != null) {
					Message msg = new Message();
					if (("1").equals(basebean.getStatus())) {
						msg.what = ConstantsUtil.HTTP_SUCCESS;
					} else if (("0").equals(basebean.getStatus())) {
						msg.what = ConstantsUtil.HTTP_FAILE;
						msg.obj = basebean.getError();
					}
					setHandler.sendMessage(msg);
				}
				return basebean;
			}
		}
		
		class BalanceHandler extends WeakHandler<WithDrawActivity> {

			@SuppressLint("HandlerLeak") public BalanceHandler(WithDrawActivity reference) {
				super(reference);
			}

			@Override
			public void handleMessage(Message msg) {
				// TODO Auto-generated method stub
				super.handleMessage(msg);
				switch (msg.what) {
				case ConstantsUtil.HTTP_SUCCESS:
					ToastUtil.showToast(baseContext, "账户设置成功");
					setResult(RESULT_OK, new Intent());
					finish();
					break;
				case ConstantsUtil.HTTP_SUCCESS_LOGIN:
					ToastUtil.showToast(baseContext, "验证码发送成功");
					break;
				case ConstantsUtil.HTTP_SUCCESS_LOGIN_LAST:
					yinhang_name.setText(basecardbean.getResult().getAccountbank());
					card_num.setText(basecardbean.getResult().getAccountnum());
					name.setText(basecardbean.getResult().getAccountname());
					break;
				case ConstantsUtil.HTTP_FAILE:
					ErrorBean error = (ErrorBean) msg.obj;
					if(error!=null)
					ToastUtil.showToast(baseActivity, error.getInfo());
					break;
				default:
					break;
				}
			}
		}
		
		@Override
		protected void onResume() {
			// TODO Auto-generated method stub
			super.onResume();
			MobclickAgent.onPageStart("PG_MY_BACCT");
			MobclickAgent.onResume(this);
		}

		@Override
		protected void onStop() {
			// TODO Auto-generated method stub
			super.onStop();
			MobclickAgent.onPageEnd("PG_MY_BACCT");
			MobclickAgent.onPause(this);
		}
}
