package com.heheys.ec.service;

import android.annotation.SuppressLint;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Binder;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.SystemClock;
import android.support.annotation.Nullable;
import android.telephony.TelephonyManager;
import android.util.Log;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.google.gson.Gson;
import com.heheys.ec.callback.HeartSendCallBack;
import com.heheys.ec.controller.receiver.AlarmReceiver;
import com.heheys.ec.model.dataBean.HeartBaseBean;
import com.heheys.ec.model.dataBean.HeartResultBean;
import com.heheys.ec.netWorkHelper.ApiHttpCilent;
import com.heheys.ec.utils.ConstantsUtil;
import com.loopj.android.http.BaseJsonHttpResponseHandler;

import org.apache.http.Header;

import java.text.SimpleDateFormat;
import java.util.Timer;

/**
 * Created by wangkui on 2016/12/8.
 * 心跳
 */

public class HeartService extends Service {
    Context mContext;
    int i =0;
    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case ConstantsUtil.HTTP_SUCCESS_LOGIN_LAST:
                     if(heartResultBean!=null){
//                         Log.i("Tag", "维度100="+"精度100=：");
                     }
            }
        }
    };
    HeartResultBean heartResultBean;
    private HeartBinder mBindler = new HeartBinder();
    private Timer mTimer;
    private TimerTask mTimerTask;
    private AlarmManager manager;
    private String Process_Name = "heart_service";
    private boolean isStop;

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return mBindler;
    }

    private LocationClient locationClient = null;
    public BDLocationListener myListener = new MyLocationListener();
    @Override
    public void onCreate() {
        super.onCreate();
        // 声明LocationClient类
        locationClient = new LocationClient(getApplicationContext());
        locationClient.registerLocationListener(myListener); // 注册监听函数
        LocationClientOption option = new LocationClientOption();
        option.setLocationMode(LocationClientOption.LocationMode.Hight_Accuracy);// 设置定位模式
        option.setPriority(LocationClientOption.NetWorkFirst); // 设置定位优先级
        option.setCoorType("bd09ll");// 返回的定位结果是百度经纬度，默认值gcj02
        option.setIsNeedAddress(true);// 返回的定位结果包含地址信息
        option.setNeedDeviceDirect(true);// 返回的定位结果包含手机机头的方向
        locationClient.setLocOption(option);
    }

    public class TimerTask extends java.util.TimerTask {
        String point;
        Context mContext;
        TimerTask(){
        }
        @Override
        public void run() {
            do {
                try {
                    locationClient.start();
                    if (locationClient != null
                            && locationClient.isStarted())
                        locationClient.requestLocation();
                    else
                        Thread.sleep(10000);//暂停1小时
                } catch (InterruptedException e) {
                }
            } while (isStop);
        }
    }

    class HeartCallBack extends
            BaseJsonHttpResponseHandler<HeartResultBean> {

        @Override
        public void onFailure(int arg0, Header[] arg1, Throwable arg2,
                              String arg3, HeartResultBean arg4) {
//            Log.i("Tag", "执行完毕onFailure");
        }

        @Override
        public void onSuccess(int arg0, Header[] arg1, String arg2,
                              HeartResultBean arg3) {
//            Log.i("Tag", "执行完毕onSuccess");
        }

        @Override
        protected HeartResultBean parseResponse(String response,
                                                    boolean arg1) throws Throwable {
            // TODO Auto-generated method stub
//            Log.i("Tag", "执行完毕parseResponse"+response);
            Gson gson = new Gson();
             heartResultBean = gson.fromJson(response,
                    HeartResultBean.class);
            Message message = Message.obtain();
            if ("1".equals(heartResultBean.getStatus())) {
                message.what = ConstantsUtil.HTTP_SUCCESS_LOGIN_LAST;
            } else {
                message.what = ConstantsUtil.HTTP_FAILE;// 错误
                message.obj = heartResultBean.getError().getInfo();
            }
            handler.sendMessage(message);
            return heartResultBean;
        }
    }
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        //启动定时任务
        isStop = true;
        mTimer = new Timer();
        mTimerTask = new TimerTask();
        mTimer.schedule(mTimerTask,1000,1000);
//        if (!isStop) {
////Log.i("K", "开始服务");
//            startTimer();
//        }
        Log.i("Tag", "服务onStartCommand");
        return START_STICKY;
    }

    private void startTimer() {
        if (mTimer == null) {
            mTimer = new Timer();
        }
//Log.i(TAG, "count: " + String.valueOf(count++));
        isStop = true;
        if (mTimerTask == null) {
            mTimerTask = new TimerTask() {
                @Override
                public void run() {
//Log.i(TAG, "count: " + String.valueOf(count++));
                    do {
                        try {
                            locationClient.start();
                            if (locationClient != null
                                    && locationClient.isStarted())
                            locationClient.requestLocation();
else
//Log.d("LocSDK3","locClient is null or not started");
                            Thread.sleep(10000);//暂停1小时
//                            Thread.sleep(10000*60*60);//暂停1小时
                        } catch (InterruptedException e) {
                        }
                    } while (isStop);
                }
            };
        }
        if (mTimer != null && mTimerTask != null)
        mTimer.schedule(mTimerTask, 1000, 1000);
    }
private static final String SERVICE_FIRST_START_KEY = "start";
    @Override
    public void onDestroy() {
//        super.onDestroy();
        // 停止定时器
        if (isStop) {
            Log.i("T", "服务停止");
            stopTimer();
        }
//        RestartService();
        Log.i("Tag", "服务destory");
    }
    private void stopTimer() {

        if (mTimer != null) {
            mTimer.cancel();
            mTimer = null;
        }
        if (mTimerTask != null) {
            mTimerTask.cancel();
            mTimerTask = null;
        }
        isStop = false;

    }
    /*
	 * 获取定位经纬度 信息
	 */
    @SuppressLint("SimpleDateFormat")
    private void getLocationInfo(BDLocation location) {

        //String latLongInfo;
        if (location != null) {
             double lat = location.getLatitude();
             double lng = location.getLongitude();
            //latLongInfo = "Lat:" + lat + "nLong:" + lng;
            SimpleDateFormat sDateFormat = new SimpleDateFormat(
                    "yyyy-MM-dd hh:mm:ss");
             String date = sDateFormat.format(new java.util.Date());
            //Log.d("坐标", latLongInfo + "," + date);
            TelephonyManager phoneMgr = (TelephonyManager) this
                    .getSystemService(Context.TELEPHONY_SERVICE);
            //Log.d("", phoneMgr.getLine1Number());
//            Log.i("Tag", "PostData"+lat+"PostData精度："+lng);
            PostData(lat, lng);
      ;
        } else {
            //latLongInfo = "No location found";
            //Log.d("", latLongInfo);
        }
    }
    public void PostData(double lat, double lng) {
        ApiHttpCilent.getInstance(getApplicationContext()).SendLonLat(getApplicationContext(),lng,lat,new HeartCallBack());
    }

    //获取定位数据
    public class MyLocationListener implements BDLocationListener {

        @Override
        public void onReceiveLocation(BDLocation location) {

            if (location == null)

                return;

            locationClient.stop();

            getLocationInfo(location);
        }

        public void onReceivePoi(BDLocation poiLocation) {

        }
    }
    @Override
    public void onLowMemory() {
        super.onLowMemory();
        RestartService();
    }

    private void RestartService() {
        manager = (AlarmManager) getSystemService(ALARM_SERVICE);
        int anHour =  1000; // 这是一小时的毫秒数
        long triggerAtTime = SystemClock.elapsedRealtime();
        Intent i = new Intent(this, AlarmReceiver.class);
        PendingIntent pi = PendingIntent.getBroadcast(this, 0, i, 0);
        manager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtTime, pi);
    }

    @Override
    public void onTaskRemoved(Intent rootIntent) {
        super.onTaskRemoved(rootIntent);
        RestartService();
//        Intent intent = new Intent(this,HeartService.class);
//        startService(intent);
        Log.i("Tag", "服务onTaskRemoved");
    }

    /**
     * 发送结果回调
     */
    public class MyJsonHttpResponseHandler extends BaseJsonHttpResponseHandler<HeartBaseBean> {

        @Override
        public void onSuccess(int i, Header[] headers, String s, HeartBaseBean heartBaseBean) {
            Gson gson = new Gson();
            HeartBaseBean result = gson.fromJson(s, HeartBaseBean.class);
        }

        @Override
        public void onFailure(int i, Header[] headers, Throwable throwable, String s, HeartBaseBean o) {

        }

        @Override
        protected HeartBaseBean parseResponse(String s, boolean b) throws Throwable {
            return null;
        }
    }

    public class HeartBinder extends Binder {

        //发送心跳
        public void SendLocation(String point) {
//            ApiHttpCilent.getInstance(mContext).SendHeartLocation(mContext, point, );
        }

    }

    private HeartSendCallBack callBack = new HeartSendCallBack() {

        @Override
        public void SendSuccess() {

        }

        @Override
        public void SendFail() {

        }
    };
}
