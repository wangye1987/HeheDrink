package com.heheys.ec.controller.activity;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import com.baidu.location.BDLocation;
import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.BitmapDescriptor;
import com.baidu.mapapi.map.BitmapDescriptorFactory;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.map.Marker;
import com.baidu.mapapi.map.MarkerOptions;
import com.baidu.mapapi.map.MyLocationConfiguration;
import com.baidu.mapapi.map.MyLocationData;
import com.baidu.mapapi.map.OverlayOptions;
import com.baidu.mapapi.map.PolygonOptions;
import com.baidu.mapapi.map.PolylineOptions;
import com.baidu.mapapi.map.Stroke;
import com.baidu.mapapi.map.TextOptions;
import com.baidu.mapapi.model.LatLng;
import com.baidu.mapapi.model.LatLngBounds;
import com.baidu.mapapi.search.core.PoiInfo;
import com.baidu.mapapi.search.core.RouteLine;
import com.baidu.mapapi.search.core.SearchResult;
import com.baidu.mapapi.search.district.DistrictResult;
import com.baidu.mapapi.search.district.DistrictSearch;
import com.baidu.mapapi.search.district.DistrictSearchOption;
import com.baidu.mapapi.search.district.OnGetDistricSearchResultListener;
import com.baidu.mapapi.search.geocode.GeoCoder;
import com.baidu.mapapi.search.poi.OnGetPoiSearchResultListener;
import com.baidu.mapapi.search.poi.PoiDetailResult;
import com.baidu.mapapi.search.poi.PoiIndoorResult;
import com.baidu.mapapi.search.poi.PoiNearbySearchOption;
import com.baidu.mapapi.search.poi.PoiResult;
import com.baidu.mapapi.search.poi.PoiSearch;
import com.baidu.mapapi.search.poi.PoiSortType;
import com.baidu.mapapi.search.route.BikingRouteResult;
import com.baidu.mapapi.search.route.DrivingRouteLine;
import com.baidu.mapapi.search.route.DrivingRoutePlanOption;
import com.baidu.mapapi.search.route.DrivingRouteResult;
import com.baidu.mapapi.search.route.IndoorRouteResult;
import com.baidu.mapapi.search.route.MassTransitRouteResult;
import com.baidu.mapapi.search.route.OnGetRoutePlanResultListener;
import com.baidu.mapapi.search.route.PlanNode;
import com.baidu.mapapi.search.route.RoutePlanSearch;
import com.baidu.mapapi.search.route.TransitRouteResult;
import com.baidu.mapapi.search.route.WalkingRouteResult;
import com.heheys.ec.R;
import com.heheys.ec.application.MyApplication;
import com.heheys.ec.lib.utils.StringUtil;
import com.heheys.ec.model.adapter.RouteLineAdapter;
import com.heheys.ec.utils.DrivingRouteOverlay;
import com.heheys.ec.utils.ToastUtil;

import java.util.ArrayList;
import java.util.List;

//import com.baidu.mapapi.map.BaiduMap;
//import com.baidu.mapapi.map.BaiduMap.OnMarkerClickListener;
//import com.baidu.mapapi.map.BitmapDescriptor;
//import com.baidu.mapapi.map.BitmapDescriptorFactory;
//import com.baidu.mapapi.map.MapStatusUpdateFactory;
//import com.baidu.mapapi.map.MapView;
//import com.baidu.mapapi.map.Marker;
//import com.baidu.mapapi.map.MarkerOptions;
//import com.baidu.mapapi.map.MarkerOptions.MarkerAnimateType;
//import com.baidu.mapapi.map.MyLocationConfiguration;
//import com.baidu.mapapi.map.MyLocationConfiguration.LocationMode;
//import com.baidu.mapapi.map.MyLocationData;
//import com.baidu.mapapi.map.OverlayOptions;
//import com.baidu.mapapi.map.PolygonOptions;
//import com.baidu.mapapi.map.PolylineOptions;
//import com.baidu.mapapi.map.Stroke;
//import com.baidu.mapapi.map.TextOptions;

/**
 * @author wangkui 地图
 */
public class BaiduMapActivity extends Activity implements
		OnGetDistricSearchResultListener,View.OnClickListener {

	private MapView mMapView;
	private Button button_seach;
	private EditText mDistrict, mCity;
	private DistrictSearch mDistrictSearch;
	private BaiduMap mBaiduMap;
	private final int color = 0xAAFF0000;
	// private final int color = 0xAA00FF00;
	private BDLocation location;
	private GeoCoder mseach;
	private PoiSearch mPoiSearch;
	// 初始化全局 bitmap 信息，不用时及时 recycle
	BitmapDescriptor bdA = BitmapDescriptorFactory
			.fromResource(R.drawable.icon_marka);
	BitmapDescriptor bdB = BitmapDescriptorFactory
			.fromResource(R.drawable.icon_markb);
	BitmapDescriptor bdC = BitmapDescriptorFactory
			.fromResource(R.drawable.icon_markc);
	BitmapDescriptor bdD = BitmapDescriptorFactory
			.fromResource(R.drawable.icon_markd);
	BitmapDescriptor bdE = BitmapDescriptorFactory
			.fromResource(R.drawable.icon_marke);
	BitmapDescriptor bdF = BitmapDescriptorFactory
			.fromResource(R.drawable.icon_markf);
	BitmapDescriptor bdG = BitmapDescriptorFactory
			.fromResource(R.drawable.icon_markg);
	BitmapDescriptor bdH = BitmapDescriptorFactory
			.fromResource(R.drawable.icon_markh);
	BitmapDescriptor bdI = BitmapDescriptorFactory
			.fromResource(R.drawable.icon_marki);
	BitmapDescriptor bdJ = BitmapDescriptorFactory
			.fromResource(R.drawable.icon_markj);
	ArrayList<BitmapDescriptor> listBitmap;
	private DrivingRouteOverlay overlay;
	public boolean useDefaultIcon;
	private DrivingRouteResult nowResultd;
	private DrivingRouteLine route;
	private DrivingRouteOverlay routeOverlay;
	private Button bt_seach;
	private EditText et_point;
	private LatLng ptCenter;
	private Marker mMarkerD;


//	@Override
//	protected void onCreate(Bundle savedInstanceState) {
//		super.onCreate(savedInstanceState);
//	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.baidumap);
		mMapView = (MapView) findViewById(R.id.bmapView);
//		listBitmap = new ArrayList<BitmapDescriptor>();
//		listBitmap.add(bdA);
//		listBitmap.add(bdB);
//		listBitmap.add(bdC);
//		listBitmap.add(bdD);
//		listBitmap.add(bdE);
//		listBitmap.add(bdF);
//		listBitmap.add(bdG);
//		listBitmap.add(bdH);
//		listBitmap.add(bdI);
//		listBitmap.add(bdJ);
//		mDistrictSearch = DistrictSearch.newInstance();
//		mDistrictSearch.setOnDistrictSearchListener(this);
//
		mBaiduMap = mMapView.getMap();
//
		mCity = (EditText) findViewById(R.id.city);
		mDistrict = (EditText) findViewById(R.id.district);
		button_seach = (Button) findViewById(R.id.districSearch);
		bt_seach = (Button) findViewById(R.id.bt_seach);
		et_point = (EditText) findViewById(R.id.et_point);
		button_seach.setOnClickListener(this);
		bt_seach.setOnClickListener(this);
//
//		mseach = GeoCoder.newInstance();
		ToastUtil.showToast(this, "定位中...");
//		// 开启定位图层
		mBaiduMap.setMyLocationEnabled(true);
		location = MyApplication.location;
		double Longitude = location.getLongitude();// 获取精度坐标
		double latitude = location.getLatitude();// 获取纬度坐标
		System.out.println("Longitude(精度)=" + Longitude + " latitude(维度)="
				+ latitude);
		Log.d("tag", "Longitude(精度)=" + Longitude + " latitude(维度)=" + latitude);

		ptCenter = new LatLng(latitude, Longitude);
//
//		//检索附近的point
////		SeachNearBy(Longitude, latitude);
//		// 反Geo搜索
//		mseach.reverseGeoCode(new ReverseGeoCodeOption().location(ptCenter));
//		mseach.setOnGetGeoCodeResultListener(new OnGetGeoCoderResultListener() {
//
//			@Override
//			public void onGetReverseGeoCodeResult(ReverseGeoCodeResult result) {
//				if (result == null
//						|| result.error != SearchResult.ERRORNO.NO_ERROR) {
//					// Toast.makeText(this, "抱歉，未能找到结果", Toast.LENGTH_LONG)
//					// .show();
//					return;
//				}
//				ToastUtil.showToast(BaiduMapActivity.this, result.getAddress());
//				mCity.setText(StringUtil.isEmpty(result.getAddressDetail().city) ? ""
//						: result.getAddressDetail().city);
//				mDistrict.setText(StringUtil.isEmpty(result.getAddressDetail().district) ? ""
//						: result.getAddressDetail().district);
//			}
//
//			@Override
//			public void onGetGeoCodeResult(GeoCodeResult arg0) {
//				// TODO Auto-generated method stub
//
//			}
//		});
//		// 构造定位数据
		MyLocationData locData = new MyLocationData.Builder()
				.accuracy(location.getRadius())
				// 此处设置开发者获取到的方向信息，顺时针0-360
				.direction(100).latitude(location.getLatitude())
				.longitude(location.getLongitude()).build();
//		// 设置定位数据
		mBaiduMap.setMyLocationData(locData);
//		// 设置定位图层的配置（定位模式，是否允许方向信息，用户自定义定位图标）
		BitmapDescriptor mCurrentMarker = BitmapDescriptorFactory
				.fromResource(R.drawable.icon_geo);
		MyLocationConfiguration.LocationMode mLocationMode = MyLocationConfiguration.LocationMode.NORMAL;
		MyLocationConfiguration config = new MyLocationConfiguration(mLocationMode, true, mCurrentMarker);
		mBaiduMap.setMyLocationConfigeration(config);
//		// 当不需要定位图层时关闭定位图层
//		mBaiduMap.setMyLocationEnabled(true);
//
//		/*
//		 * 设置热点点击
//		 */
//		mBaiduMap.setOnMarkerClickListener(new BaiduMap.OnMarkerClickListener() {
//
//			@Override
//			public boolean onMarkerClick(Marker arg0) {
//				if(overlay!=null)
//					overlay.removeFromMap();
//				LatLng lat = arg0.getPosition();
//				RoutePlan(ptCenter, lat);
//				return true;
//			}
//		});

	}

	// 响应DLg中的List item 点击
	interface OnItemInDlgClickListener {
		public void onItemClick(int position);
	}

	// 供路线选择的Dialog
	class MyTransitDlg extends Dialog {
		private List<? extends RouteLine> mtransitRouteLines;
		private ListView transitRouteList;
		private RouteLineAdapter mTransitAdapter;

		OnItemInDlgClickListener onItemInDlgClickListener;

		public MyTransitDlg(Context context, int theme) {
			super(context, theme);
		}

		public MyTransitDlg(Context context,
				List<? extends RouteLine> transitRouteLines,
				RouteLineAdapter.Type type) {
			this(context, 0);
			mtransitRouteLines = transitRouteLines;
			mTransitAdapter = new RouteLineAdapter(context, mtransitRouteLines,
					type);
			requestWindowFeature(Window.FEATURE_NO_TITLE);
		}

//		@Override
//		protected void onCreate(Bundle savedInstanceState) {
//			super.onCreate(savedInstanceState);
//			setContentView(R.layout.activity_transit_dialog);
//
//			transitRouteList = (ListView) findViewById(R.id.transitList);
//			transitRouteList.setAdapter(mTransitAdapter);
//
//			transitRouteList
//					.setOnItemClickListener(new AdapterView.OnItemClickListener() {
//
//						@Override
//						public void onItemClick(AdapterView<?> parent,
//								View view, int position, long id) {
//							onItemInDlgClickListener.onItemClick(position);
//							dismiss();
//
//						}
//					});
//		}

		public void setOnItemInDlgClickLinster(
				OnItemInDlgClickListener itemListener) {
			onItemInDlgClickListener = itemListener;
		}

	}

	/*
	 * 开车路径规划
	 */
	private void RoutePlan(LatLng latst, LatLng lated) {
		// 第一步，创建驾车线路规划检索实例；
		RoutePlanSearch mSearch = RoutePlanSearch.newInstance();
		// 第二步，创建驾车线路规划检索监听者；
		OnGetRoutePlanResultListener listener = new OnGetRoutePlanResultListener() {

			

			public void onGetWalkingRouteResult(WalkingRouteResult result) {
				// 获取步行线路规划结果
			}

			public void onGetTransitRouteResult(TransitRouteResult result) {
				// 获取公交换乘路径规划结果
			}

			public void onGetDrivingRouteResult(DrivingRouteResult result) {
				// 获取驾车线路规划结果
				// List<DrivingRouteLine> route = result.getRouteLines();
				// for(DrivingRouteLine line:route){
				// s
				// }

				if (result == null
						|| result.error != SearchResult.ERRORNO.NO_ERROR) {
					Toast.makeText(BaiduMapActivity.this, "抱歉，未找到结果",
							Toast.LENGTH_SHORT).show();
				}
				if (result.error == SearchResult.ERRORNO.AMBIGUOUS_ROURE_ADDR) {
					// 起终点或途经点地址有岐义，通过以下接口获取建议查询信息
					// result.getSuggestAddrInfo()
					return;
				}
				if (result.error == SearchResult.ERRORNO.NO_ERROR) {
					int nodeIndex = -1;
					overlay = new MyDrivingRouteOverlay(
							mBaiduMap);
					if (result.getRouteLines().size() > 1) {
						nowResultd = result;

						MyTransitDlg myTransitDlg = new MyTransitDlg(
								BaiduMapActivity.this, result.getRouteLines(),
								RouteLineAdapter.Type.DRIVING_ROUTE);
						myTransitDlg
								.setOnItemInDlgClickLinster(new OnItemInDlgClickListener() {

									public void onItemClick(int position) {
										route = nowResultd.getRouteLines().get(
												position);
										
										mBaiduMap
												.setOnMarkerClickListener(overlay);
										routeOverlay = overlay;
										overlay.setData(nowResultd
												.getRouteLines().get(position));
										overlay.addToMap();
										overlay.zoomToSpan();
									}

								});
						myTransitDlg.show();

					} else if (result.getRouteLines().size() == 1) {
						route = result.getRouteLines().get(0);
						routeOverlay = overlay;
						mBaiduMap.setOnMarkerClickListener(overlay);
						overlay.setData(result.getRouteLines().get(0));
						overlay.addToMap();
						overlay.zoomToSpan();
					}

				}

			}

			@Override
			public void onGetBikingRouteResult(BikingRouteResult arg0) {
				// TODO Auto-generated method stub

			}

			@Override
			public void onGetIndoorRouteResult(IndoorRouteResult arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onGetMassTransitRouteResult(MassTransitRouteResult arg0) {
				// TODO Auto-generated method stub
				
			}
		};
		// 第三步，设置驾车线路规划检索监听者；
		mSearch.setOnGetRoutePlanResultListener(listener);
		// 第四步，准备检索起、终点信息；
		// PlanNode stNode = PlanNode.withCityNameAndPlaceName("北京", "龙泽");
		PlanNode stNode = PlanNode.withLocation(latst);
		PlanNode enNode = PlanNode.withLocation(lated);
		// 第五步，发起驾车线路规划检索；
		mSearch.drivingSearch((new DrivingRoutePlanOption()).from(stNode).to(
				enNode));
	}

	// 定制RouteOverly
	private class MyDrivingRouteOverlay extends DrivingRouteOverlay {

		public MyDrivingRouteOverlay(BaiduMap baiduMap) {
			super(baiduMap);
		}

		@Override
		public BitmapDescriptor getStartMarker() {
			if (useDefaultIcon) {

				return BitmapDescriptorFactory.fromResource(R.drawable.icon_st);
			}
			return null;
		}

		@Override
		public BitmapDescriptor getTerminalMarker() {
			if (useDefaultIcon) {
				return BitmapDescriptorFactory.fromResource(R.drawable.icon_en);
			}
			return null;
		}
	}

	/*
	 * 附近热点检索
	 */
	private void SeachNearBy(double Longitude, double latitude) {
		mPoiSearch = PoiSearch.newInstance();
		// 第二步，创建POI检索监听者；
		OnGetPoiSearchResultListener poiListener = new OnGetPoiSearchResultListener() {
			public void onGetPoiResult(PoiResult result) {
				if (result == null
						|| result.error == SearchResult.ERRORNO.RESULT_NOT_FOUND) {
					return;
				}
				if (result.error == SearchResult.ERRORNO.NO_ERROR) {
					// 获取POI检索结果
					List<PoiInfo> lsPoint = result.getAllPoi();
					if (lsPoint != null && lsPoint.size() > 0) {
						int size = lsPoint.size();
						for (int i = 0; i < size; i++) {
							setPoint(i, lsPoint.get(i).location.latitude,
									lsPoint.get(i).location.longitude,
									lsPoint.get(i).name);
						}
					}
					return;
				}

			}

			@Override
			public void onGetPoiIndoorResult(PoiIndoorResult arg0) {
				// TODO Auto-generated method stub
				// 获取Place详情页检索结果

				System.out.println(arg0.toString());
			}

			@Override
			public void onGetPoiDetailResult(PoiDetailResult arg0) {
				// TODO Auto-generated method stub
				System.out.println(arg0.toString());
			}
		};
		// 第三步，设置POI检索监听者；
		mPoiSearch.setOnGetPoiSearchResultListener(poiListener);

		
	}

	/*
	 * 搜索兴趣点
	 * */
	private void SeachePoint(String name){
		MyPoiNearbySearchOption myPoiNearbySearchOption = new MyPoiNearbySearchOption();
		myPoiNearbySearchOption.keyword(name)
				.location(ptCenter).pageNum(10)
				.radius(5000);
		mPoiSearch.searchNearby(myPoiNearbySearchOption);
	}
	private BitmapDescriptor Drable(int i) {
		return listBitmap.get(i);
	}

	/*
	 * 设置百度地图检索视图在地图标注
	 */
	private void setPoint(int i, double arg0, double arg1, String addName) {
		// 定义Maker坐标点
		LatLng point = new LatLng(arg0, arg1);
		// 构建Marker图标 bdA
		BitmapDescriptor bitmap = Drable(i);
		OverlayOptions textOption = new TextOptions().bgColor(0xAAFFFF00)
				.fontSize(14).fontColor(0xFFFF00FF).text(addName)
				.position(point);
		// 在地图上添加Marker，并显示
		// mBaiduMap.addOverlay(option);
		mBaiduMap.addOverlay(textOption);
		
		MarkerOptions ooD = new MarkerOptions().position(point)
				.icon(listBitmap.get(i)).zIndex(0);
		// 生长动画
		ooD.animateType(MarkerOptions.MarkerAnimateType.grow);
		mMarkerD = (Marker) (mBaiduMap.addOverlay(ooD));
		mMarkerD.setPeriod(5);
	}

	class MyPoiNearbySearchOption extends PoiNearbySearchOption {

		@Override
		public PoiNearbySearchOption keyword(String arg0) {
			// TODO Auto-generated method stub
			System.out.println(arg0);
			return super.keyword(arg0);
		}

		@Override
		public PoiNearbySearchOption location(LatLng arg0) {
			// TODO Auto-generated method stub
			System.out.println(arg0);
			return super.location(arg0);
		}

		@Override
		public PoiNearbySearchOption pageCapacity(int arg0) {
			// TODO Auto-generated method stub
			System.out.println(arg0);
			return super.pageCapacity(arg0);
		}

		@Override
		public PoiNearbySearchOption pageNum(int arg0) {
			// TODO Auto-generated method stub
			System.out.println(arg0);
			return super.pageNum(arg0);
		}

		@Override
		public PoiNearbySearchOption radius(int arg0) {
			// TODO Auto-generated method stub
			System.out.println(arg0);
			return super.radius(arg0);
		}

		@Override
		public PoiNearbySearchOption sortType(PoiSortType arg0) {
			// TODO Auto-generated method stub
			return super.sortType(arg0);
		}

	}

//
//	@Override
//	protected boolean hasTitle() {
//		// TODO Auto-generated method stub
//		return true;
//	}
//
//	@Override
//	protected void loadChildView() {
//		// TODO Auto-generated method stub
//
//	}
//
//	@Override
//	protected void getNetData() {
//		// TODO Auto-generated method stub
//
//	}
//
//	@Override
//	protected void reloadCallback() {
//		// TODO Auto-generated method stub
//
//	}
//
//	@Override
//	protected void setChildViewListener() {
//		// TODO Auto-generated method stub
//	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
//		super.onClick(v);
		switch (v.getId()) {
		case R.id.districSearch:
			String city = "";
			String district = "";
			if (mCity.getText() != null && !"".equals(mCity.getText())) {
				city = mCity.getText().toString();
			}
			if (mDistrict.getText() != null && !"".equals(mDistrict.getText())) {
				district = mDistrict.getText().toString();
			}
			mDistrictSearch.searchDistrict(new DistrictSearchOption().cityName(
					city).districtName(district));
			break;
		case R.id.bt_seach:
			//检索附近兴趣点
			String seachePoint = et_point.getText().toString().trim();
			if(!StringUtil.isEmpty(seachePoint)){
				if(mMarkerD != null){
				mMarkerD.remove();
				}
				SeachePoint(seachePoint);
			}else{
				ToastUtil.showToast(this, "请输入搜索名称");
			}
			break;
		default:
			break;
		}
	}

//	@Override
//	protected String setTitleName() {
//		// TODO Auto-generated method stub
//		return "区域热图";
//	}
//
//	@Override
//	protected String setRightText() {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//	@Override
//	protected int setLeftImageResource() {
//		// TODO Auto-generated method stub
//		return 0;
//	}
//
//	@Override
//	protected int setMiddleImageResource() {
//		// TODO Auto-generated method stub
//		return 0;
//	}
//
//	@Override
//	protected int setRightImageResource() {
//		// TODO Auto-generated method stub
//		return 0;
//	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		// 在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理
//		mDistrictSearch.destroy();
		mMapView.onDestroy();
		MapView.setMapCustomEnable(false);
	}

	@Override
	protected void onResume() {
		super.onResume();
		// 在activity执行onResume时执行mMapView. onResume ()，实现地图生命周期管理
		mMapView.onResume();
	}

	@Override
	protected void onPause() {
		super.onPause();
		// 在activity执行onPause时执行mMapView. onPause ()，实现地图生命周期管理
		mMapView.onPause();
	}

	@Override
	public void onGetDistrictResult(DistrictResult districtResult) {
		mBaiduMap.clear();
		if (districtResult == null) {
			return;
		}
		if (districtResult.error == SearchResult.ERRORNO.NO_ERROR) {
			List<List<LatLng>> polyLines = districtResult.getPolylines();
			if (polyLines == null) {
				return;
			}
			LatLngBounds.Builder builder = new LatLngBounds.Builder();
			for (List<LatLng> polyline : polyLines) {
				OverlayOptions ooPolyline11 = new PolylineOptions().width(10)
						.points(polyline).dottedLine(true).color(color);
				mBaiduMap.addOverlay(ooPolyline11);
				OverlayOptions ooPolygon = new PolygonOptions()
						.points(polyline).stroke(new Stroke(5, 0xAA00FF88))
						.fillColor(0xAAFFFF00);
				mBaiduMap.addOverlay(ooPolygon);
				for (LatLng latLng : polyline) {
					builder.include(latLng);
				}
			}
			mBaiduMap.setMapStatus(MapStatusUpdateFactory
					.newLatLngBounds(builder.build()));

		}
	}
}
