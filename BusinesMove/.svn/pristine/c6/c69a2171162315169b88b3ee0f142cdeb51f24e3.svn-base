package com.heheys.ec.controller.activity;

import android.content.Intent;
import android.os.Message;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.google.gson.Gson;
import com.heheys.ec.R;
import com.heheys.ec.application.MyApplication;
import com.heheys.ec.base.BaseActivity;
import com.heheys.ec.lib.activityManager.StartActivityUtil;
import com.heheys.ec.lib.utils.StringUtil;
import com.heheys.ec.lib.utils.WeakHandler;
import com.heheys.ec.model.dataBean.BaseBean;
import com.heheys.ec.model.dataBean.BaseCardBean;
import com.heheys.ec.model.dataBean.ErrorBean;
import com.heheys.ec.model.dataBean.MyBalanceBaseBean;
import com.heheys.ec.netWorkHelper.ApiHttpCilent;
import com.heheys.ec.utils.ConstantsUtil;
import com.heheys.ec.utils.ToastNoNetWork;
import com.heheys.ec.utils.ToastUtil;
import com.heheys.ec.utils.Utils;
import com.heheys.ec.view.CommonDialog;
import com.loopj.android.http.BaseJsonHttpResponseHandler;
import com.umeng.analytics.MobclickAgent;

import org.apache.http.Header;

/**
 * 作者：wangkui on 2016/12/19 11:36
 * 邮箱：wangkui20090909@sina.com
 * 说明:账户设置信息页
 */

public class CountSettingActivity extends BaseActivity implements CommonDialog.BackGroundListener{
    private TextView setting_name;
    private LinearLayout setting_password;
    private LinearLayout setting_address;
    private LinearLayout setting_account;
    private BaseCardBean.ResultCardBean resultcardbean;
//    private String roleid;
    private Button bt_login_out;
    private LinearLayout login_out;
    private String mobile;
    private BaseBean loginBean;
    private Animation animationShow, animationHide;
    private  MyHandler myHandler = new MyHandler(this);
    private RelativeLayout li_parent;

    @Override
    protected void onCreate() {
        setBaseContentView(R.layout.count_setting);
        initView();
        initData();
    }


    private void initData() {
        Intent intent = getIntent();
        if(intent != null){
            mobile = intent.getStringExtra("name");
            resultcardbean = (BaseCardBean.ResultCardBean) intent.getSerializableExtra("resultcardbean");
            setting_name.setText(StringUtil.isEmpty(mobile)?"": mobile);
        }
    }

    @Override
    protected boolean hasTitle() {
        return true;
    }

    @Override
    protected void loadChildView() {

    }

    @Override
    protected void getNetData() {

    }

    @Override
    protected void reloadCallback() {

    }


    @Override
    public void onClick(View v) {
        super.onClick(v);
        Intent intent =new Intent();
        switch (v.getId()){
            case R.id.setting_account:
                intent.setClass(baseActivity,
                            WithDrawActivity.class);
                    intent.putExtra("account", resultcardbean);
                        intent.putExtra("role", -1);//其他角色
                    StartActivityUtil.startActivity(baseActivity, intent);
                break;
            case R.id.setting_address:
                MobclickAgent.onEvent(baseActivity, "C_MY_ADR_1");//我的收货地址
                if (ToastNoNetWork.ToastError(baseActivity))
                    return;
                //获取收货地址
                intent.setClass(baseActivity, SettingBaseActivity.class);
                intent.putExtra("type", ConstantsUtil.ADD_MANAGER);
                intent.putExtra("isCenter", true);
                StartActivityUtil.startActivity(baseActivity, intent);
                break;
            case R.id.setting_password:
                intent.setClass(baseActivity, UpdatePassWordActivity.class);
                intent.putExtra("mobile", mobile);
                StartActivityUtil.startActivity(baseActivity, intent);
                break;
            case R.id.bt_login_out:
                /**
                 * 退出
                 */
                li_parent.startAnimation(animationShow);
                if (ToastNoNetWork.ToastError(baseActivity))
                    return;
                ShowDialog("是否退出登录?", "温馨提示");

                break;
        }
    }
    public void ShowDialog(String notice, String title) {
        CommonDialog.makeText(baseActivity, title, notice, new CommonDialog.OnDialogListener() {
            @Override
            public void onResult(int result, CommonDialog commonDialog,
                                 String tel) {
                // TODO Auto-generated method stub
                if (CommonDialog.OnDialogListener.LEFT == result) {
                    if (!ToastNoNetWork.ToastError(baseActivity)) {
                        ApiHttpCilent.getInstance(baseActivity).loginoOut(baseActivity,
                                new MyCallBack());
                    }
                    CommonDialog.Dissmess();
                } else {
                    CommonDialog.Dissmess();
                }
                li_parent.startAnimation(animationHide);
            }
        }).showDialog();
    }
    private void Dimess() {
        baseActivity.runOnUiThread(new Runnable() {
            public void run() {
                if (ApiHttpCilent.loading != null && ApiHttpCilent.loading.isShowing())
                    ApiHttpCilent.loading.dismiss();
            }
        });
    }

    @Override
    public void showListenr() {
        li_parent.startAnimation(animationShow);
    }

    @Override
    public void hideListener() {
        li_parent.startAnimation(animationHide);
    }

    //退出登录和基本信息
    class MyCallBack extends BaseJsonHttpResponseHandler<BaseBean> {

        @Override
        public void onFailure(int arg0, Header[] arg1, Throwable arg2,
                              String arg3, BaseBean arg4) {
            Dimess();
        }

        @Override
        public void onSuccess(int arg0, Header[] arg1, String arg2,
                              BaseBean arg3) {
            Dimess();
        }

        @Override
        protected BaseBean parseResponse(String response, boolean arg1)
                throws Throwable {
            // TODO Auto-generated method stub
            Dimess();
            Gson gson = new Gson();
             loginBean = gson.fromJson(response, BaseBean.class);
            Message message = Message.obtain();
            if ("1".equals(loginBean.getStatus())) {// 正常
                message.what = ConstantsUtil.HTTP_SUCCESS;
                message.obj = loginBean.getResult();
            } else {
                message.what = ConstantsUtil.HTTP_FAILE;// 错误
                message.obj = loginBean.getError();
            }
            myHandler.sendMessage(message);

            return loginBean;
        }
    }

    public static class MyHandler extends WeakHandler<CountSettingActivity> {

        private MyBalanceBaseBean.ResultBanlanceBean resultBanlanceBean;

        public MyHandler(CountSettingActivity reference) {
            super(reference);
            // TODO Auto-generated constructor stub
        }

        public void handleMessage(Message msg) {
            // TODO Auto-generated method stub
            super.handleMessage(msg);
            switch (msg.what) {
                case ConstantsUtil.HTTP_SUCCESS:
                        Utils.StartLogin(getReference().baseActivity, true);
                        ToastUtil.showToast(getReference().baseActivity, getReference().baseActivity.getResources()
                                .getString(R.string.loginout_success));
                        MyApplication.getInstance().clearLoginInor(
                                getReference().baseActivity);
                    break;
                case ConstantsUtil.HTTP_FAILE:
                    ErrorBean back = (ErrorBean) msg.obj;
                    // code=100代表登录状态失效 需要重新登录
                    if (back != null ) {
                        ToastUtil.showToast(getReference(),back.getInfo());
////                        NotLoginStatus();
//                        Utils.StartLogin(getReference().baseActivity, true);
                    }
                    break;
                default:
                    break;
            }
        }
    }
    @Override
    protected void setChildViewListener() {

    }

    @Override
    protected String setTitleName() {
        return "账户设置";
    }

    @Override
    protected String setRightText() {
        return null;
    }

    @Override
    protected int setLeftImageResource() {
        return 0;
    }

    @Override
    protected int setMiddleImageResource() {
        return 0;
    }

    @Override
    protected int setRightImageResource() {
        return 0;
    }

    private void initView() {
        rlTitlePrent.setBackgroundColor(getResources().getColor(R.color.white));
        li_parent = (RelativeLayout) findViewById(R.id.li_parent);
        setting_name = (TextView) findViewById(R.id.setting_name);
        setting_password = (LinearLayout) findViewById(R.id.setting_password);
        setting_address = (LinearLayout) findViewById(R.id.setting_address);
        setting_account = (LinearLayout) findViewById(R.id.setting_account);
        bt_login_out = (Button) findViewById(R.id.bt_login_out);
        login_out = (LinearLayout) findViewById(R.id.login_out);
        setting_password.setOnClickListener(this);
        setting_address.setOnClickListener(this);
        setting_account.setOnClickListener(this);
        bt_login_out.setOnClickListener(this);
        animationShow = AnimationUtils.loadAnimation(baseActivity,
                R.anim.show_scale);
        animationShow.setDuration(800);
        animationShow.setFillAfter(true);
        animationHide = AnimationUtils.loadAnimation(baseActivity,
                R.anim.hide_scale);
        animationHide.setDuration(800);
        animationHide.setFillAfter(true);
    }
}
